services:
  signal_postgres:
    image: postgres:17
    container_name: signaldb
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - signal_pg_data:/var/lib/postgresql/data
    networks:
      - signal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  signal_redis:
    image: redis:7
    container_name: signal_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - signal_redis_data:/data
    networks:
      - signal_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  signal_celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: signal_celery_worker
    command: celery -A app.celery.celery_app.celery worker --loglevel=INFO --concurrency=2
    environment:
      - CELERY_BROKER_URL=redis://signal_redis:6379/0
      - CELERY_RESULT_BACKEND=redis://signal_redis:6379/1
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@signal_postgres:5432/${DATABASE_NAME}
    depends_on:
      signal_postgres:
        condition: service_healthy
      signal_redis:
        condition: service_healthy
    volumes:
      - ./:/app
    networks:
      - signal_network

  signal_celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: signal_celery_beat
    command: celery -A app.celery.celery_app.celery beat --loglevel=INFO
    environment:
      - CELERY_BROKER_URL=redis://signal_redis:6379/0
      - CELERY_RESULT_BACKEND=redis://signal_redis:6379/1
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@signal_postgres:5432/${DATABASE_NAME}
    depends_on:
      signal_postgres:
        condition: service_healthy
      signal_redis:
        condition: service_healthy
    volumes:
      - ./:/app
    networks:
      - signal_network

volumes:
  signal_pg_data:
  signal_redis_data:

networks:
  signal_network:
    driver: bridge
